#!/usr/bin/python
import time

from termcolor import colored
import ccxt


class CryptoLiveFeed:
    """Run a CryptoStrategy on a list of assets. Loop through all the assets in
    the target asset list and run the strategy on each one."""
    
    def __init__ (self, assets=[], strategy=None, broker=None):
        self.assets = assets
        self.strategy = strategy
        self.broker = broker

    def run (self, vinterval=5):
        """Run loop on all assets and run strategy on each asset."""

        # Initiate exchanges with ccxt first.
        vexchanges = {}
        for vex in self.assets:
            vexchanges[vex['name']] = getattr(ccxt, vex['name'])()

        # Loop through coins within exchanges.
        while True:
            for vex in self.assets:
                for vcoin in vex['coins']:
                    
                    # Run the strategy on this coin (should BUY or SELL)
                    self.run_strategy(vex, vcoin. vexchanges)

            # Print message after each succesful iteration on target assets.
            print("[* LiveFeed] Finished iteration. Waiting %s sec..." 
                % vinterval)
            time.sleep(vinterval)

    def run_strategy (self, vex, vcoin, vexchanges):
        """Run the LiveFeed's strategy on this coin. This function is 
        consolidated for brevity.
        
        Params
        ------
        vex
            The string name of the exchange on which we are operating on. This
            should correspond to one of the exchanges on CCXT.

        vcoin
            The coin object found in the assets list generated by 'exchanges'
            command.
        
        vexchanges
            The hash of CCXT exchange objects that were previouslt initiated.
            These objects are used to connect to exchange API functions.
        """
        
        # Get latest price on asset.
        print(vcoin['symbol'])
        try:
            vlatest_bars = vexchanges[vex['name']].fetch_ohlcv(vcoin['symbol'])
            vlatest_price = vlatest_bars[-1]
            print(float(vlatest_price[-2]))
        except Exception as e:
            # Got an error, maybe too many requests for API.
            print(colored("[* LiveFeed] Cant get bars for %s: %s") %
                (vcoin['symbol'], e), 'red')

        # Run strategy here.
        if self.broker.is_open(vcoin['symbol']):
            # SELL?
            if self.strategy.should_close(): 
                self.broker.sell(vcoin['symbol'], 
                    self.strategy.vtrade_quantity)
        else:
            # BUY?
            if self.strategy.should_open({}, []):
                self.broker.buy(vcoin['symbol'], 
                    self.strategy.vtrade_quantity)
        
        # Limit API request
        print()
        time.sleep(0.1)
        # time.sleep(vexchanges[vex['name']].rateLimit / 1000)